/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package binary.tree;

public class App {


    public static void main(String[] args){

//        <<< Code Challenge 15 >>>

        BinaryTree binaryTree = new BinaryTree();

        System.out.println("befor " +binaryTree);
        binaryTree.setRoot(new Node(7));
        binaryTree.getRoot().setLeft(new Node(24));
        binaryTree.getRoot().setRight(new Node(11));
        binaryTree.getRoot().getLeft().setLeft(new Node(13));
        binaryTree.getRoot().getLeft().setRight(new Node(50));
//        binaryTree.getRoot().getLeft().setRight(new Node((1)));

        System.out.println(binaryTree);

        System.out.print("inOrder: ");
        binaryTree.inOrder(binaryTree.getRoot());

        System.out.println();
        System.out.println();

        System.out.print("preOrder: ");
        binaryTree.preOrder(binaryTree.getRoot());

        System.out.println();
        System.out.println();

//        System.out.print("postOrder: ");
//        binaryTree.postOrder(binaryTree.getRoot());

        System.out.println();
        System.out.println();




//        BINARY SEARCH TREE
        BinarySearchTree binarySearchTree = new BinarySearchTree();

        binarySearchTree.add(7);
        binarySearchTree.add(11);
        binarySearchTree.add(2021);
        binarySearchTree.add(2024);

        binarySearchTree.inorder();

        System.out.println(binarySearchTree.contains(7));


        //        <<< Code Challenge 16 >>>

        System.out.println("Max value is: " + binaryTree.findMaxvalue());



    }
}
