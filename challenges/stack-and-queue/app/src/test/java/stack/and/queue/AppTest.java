/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.Test;
import static org.junit.Assert.*;


public class AppTest {

//    <<< CODE CHALLENGE 10 >>>

    @Test
    public void pushToStackTest(){
        Stack<Integer> stackTest = new Stack<>();
        stackTest.push(11);
        stackTest.push(7);
        stackTest.push(2021);
        assertEquals("Stack { 2021 --> 7 --> 11 --> Null }",stackTest.toString());
    }

    @Test
    public void popStackTest(){
        Stack<Integer> stackTest = new Stack<>();
        stackTest.push(11);
        stackTest.push(7);
        stackTest.push(2021);
        stackTest.pop();
        assertEquals("Stack { 7 --> 11 --> Null }",stackTest.toString());
    }

    @Test(expected = IllegalArgumentException.class)
    public void emptyStackTest(){
        Stack<Integer> stackTest = new Stack<>();
        stackTest.push(11);
        stackTest.push(7);
        stackTest.push(2021);
        stackTest.pop();
        stackTest.pop();
        stackTest.pop();
        assertEquals("Stack { Null }",stackTest.toString());
        assertTrue(stackTest.isEmpty());
        assertEquals(IllegalArgumentException.class,stackTest.pop());
        assertNull(stackTest.peek());


    }

    @Test
    public void peekStackTest(){
        Stack<Integer> stackTest = new Stack<>();
        stackTest.push(11);
        stackTest.push(7);
        stackTest.push(2021);
        assertEquals(2021,stackTest.peek());
        stackTest.pop();
        assertEquals(7,stackTest.peek());
    }

    @Test
    public void enqueueToQueueTest(){
        Queue<Integer> queueTest = new Queue<>();
        queueTest.enqueue(11);
        queueTest.enqueue(7);
        queueTest.enqueue(2021);
        assertEquals("Queue { 11 --> 7 --> 2021 --> Null }",queueTest.toString());
    }

    @Test
    public void dequeueFromQueueTest(){
        Queue<Integer> queueTest = new Queue<>();
        queueTest.enqueue(11);
        queueTest.enqueue(7);
        queueTest.enqueue(2021);

        queueTest.dequeue();
        assertEquals("Queue { 7 --> 2021 --> Null }",queueTest.toString());
    }
    @Test(expected = IllegalArgumentException.class)
    public void emptyQueueTest(){
        Queue<Integer> queueTest = new Queue<>();
        queueTest.enqueue(11);
        queueTest.enqueue(7);
        queueTest.enqueue(2021);
        queueTest.dequeue();
        queueTest.dequeue();
        queueTest.dequeue();
        assertTrue(queueTest.isEmpty());
        assertEquals("Queue { Null }",queueTest.toString());
        assertEquals( null,queueTest.dequeue());
        assertNull(queueTest.peek());
    }

    @Test
    public void peekQueueTest(){
        Queue<Integer> queueTest = new Queue<>();
        queueTest.enqueue(11);
        queueTest.enqueue(7);
        queueTest.enqueue(2021);
        assertEquals( java.util.Optional.of(11), java.util.Optional.ofNullable(queueTest.peek()));
        queueTest.dequeue();
        assertEquals(java.util.Optional.of(7),java.util.Optional.ofNullable(queueTest.peek()));
    }

    //    <<<< code challenge 11 >>>

    @Test
    public void enqueueTest(){

        PseudoQueue pseudoQueue = new PseudoQueue();

        pseudoQueue.enqueue(11);
        assertEquals("Stack { 11 --> Null }",pseudoQueue.toString());
        pseudoQueue.enqueue(6);
        pseudoQueue.enqueue(2017);
        assertEquals(11,pseudoQueue.stack1.peek());
        assertEquals("Stack { 11 --> 6 --> 2017 --> Null }",pseudoQueue.toString());
        assertFalse(pseudoQueue.stack1.isEmpty());
    }

    @Test(expected = IllegalArgumentException.class)
    public void dequeueTest(){
        PseudoQueue pseudoQueue = new PseudoQueue();
        pseudoQueue.enqueue(11);
        pseudoQueue.enqueue(6);
        pseudoQueue.enqueue(2017);

        assertEquals(11 ,pseudoQueue.dequeue());
        assertEquals("Stack { 6 --> 2017 --> Null }",pseudoQueue.toString());
        pseudoQueue.dequeue();
        pseudoQueue.dequeue();
        assertTrue(pseudoQueue.stack1.isEmpty());
        assertEquals("Stack { Null }",pseudoQueue.toString());
        assertEquals(new IllegalArgumentException("Empty"),pseudoQueue.dequeue());
    }


    //    <<<< code challenge 12 >>>

    @Test
    public void enqueueAnimalShelterTest(){

        AnimalShelter shelterTest = new AnimalShelter();

        shelterTest.enqueue(new Cat("looz"));
        shelterTest.enqueue(new Cat("meghem"));
        assertEquals("AnimalShelter { catQueue = Queue { looz --> meghem --> Null }, dogQueue = Queue { Null } }",shelterTest.toString());
        assertEquals("looz", shelterTest.catQueue.peek().toString());

        shelterTest.enqueue(new Dog("husky"));
        shelterTest.enqueue(new Dog("oklah"));
        assertEquals("AnimalShelter { catQueue = Queue { looz --> meghem --> Null }, dogQueue = Queue { husky --> oklah --> Null } }",shelterTest.toString());
        assertEquals("husky", shelterTest.dogQueue.peek().toString());

        assertFalse(shelterTest.catQueue.isEmpty());
        assertFalse(shelterTest.dogQueue.isEmpty());

        shelterTest.dequeue("cat");
        assertEquals("AnimalShelter { catQueue = Queue { meghem --> Null }, dogQueue = Queue { husky --> oklah --> Null } }",shelterTest.toString());

        shelterTest.dequeue("dog");
        assertEquals("AnimalShelter { catQueue = Queue { meghem --> Null }, dogQueue = Queue { oklah --> Null } }",shelterTest.toString());

        shelterTest.dequeue("cat");
        shelterTest.dequeue("dog");
        assertEquals("AnimalShelter { catQueue = Queue { Null }, dogQueue = Queue { Null } }",shelterTest.toString());
        assertTrue(shelterTest.catQueue.isEmpty());
        assertTrue(shelterTest.dogQueue.isEmpty());

        assertNull(shelterTest.dequeue("cat"));
        assertNull(shelterTest.dequeue("dog"));

    }

}
