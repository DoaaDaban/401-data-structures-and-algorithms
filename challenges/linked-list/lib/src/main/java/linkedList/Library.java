/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedList;

import static linkedList.LinkedList.zipLists;

public class Library {



    public static void main(String[] args) {

        LinkedList<Integer> linkedList = new LinkedList<>();

//        <<<< CODE CHALLENGE 5 >>>

//        ADD NODES TO THE LIST
        linkedList.insert(8);
        linkedList.insert(9);
        linkedList.insert(6);

//        CHECK IF THE NODE IN THE LIST OR NOT
        if(linkedList.isInclude(7)){
            System.out.println("It is include");
        }else{
            System.out.println("It is NOT include");
        }

        if(linkedList.isInclude(8)){
            System.out.println("It is include");
        }else{
            System.out.println("It is NOT include");
        }


//        <<<< CODE CHALLENGE 6 >>>

//        ADD NEW NODE AT THE END OF THE LIST
        linkedList.addNewNodeAtEnd(10);

//        ADD NEW NODE BEFORE THE SPECIFIC NODE
        linkedList.addNewNodeBefore(8,15);

//        ADD NEW NODE AFTER THE SPECIFIC NODE
        linkedList.addNewNodeAfter(8,16);

//        PRINT THE PATH OF THE NODES
        System.out.println(linkedList.stringPath());

//        <<<< CODE CHALLENGE 7 >>>

        System.out.println(linkedList.kthFromEnd(0));
        System.out.println(linkedList.kthFromEnd(3));
        System.out.println(linkedList.kthFromEnd(-1));
        System.out.println(linkedList.kthFromEnd(100));


//        <<<< CODE CHALLENGE 8 >>>


        LinkedList<Integer> linkedList1 = new LinkedList<>();
        LinkedList<Integer> linkedList2 = new LinkedList<>();

        linkedList1.insert(1);
        linkedList1.insert(9);
        linkedList2.insert(20);
        linkedList2.insert(4);
        linkedList2.insert(5);
        linkedList2.insert(6);
        linkedList2.insert(7);
        linkedList2.insert(8);
//        linkedList2.insert(6);

        System.out.println("lis1 "+linkedList1.stringPath());
        System.out.println("list2 "+linkedList2.stringPath());

        zipLists(linkedList1, linkedList2);
        System.out.println("zipLists "+zipLists(linkedList1, linkedList2).stringPath());

//        System.out.println("isPalindrome " + linkedList2.isPalindrome(linkedList2.head));
        System.out.println("afterdelete "+ linkedList2.stringPath());
        Node delete = linkedList2.deleteMid(linkedList2.head);

        System.out.println("delete the middle " + delete.toString());
        System.out.println("after " + linkedList2.stringPath());


    }
}
