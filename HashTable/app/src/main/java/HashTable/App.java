/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HashTable;

import HashTable.binaryTree.BinaryTree;
import HashTable.binaryTree.Node;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class App {

// <<< Code challenge 34 >>>

  private static boolean isUnique(String str){
   HashMap<Character,Integer> charcount = new HashMap<>();

   String lowerCase = str.toLowerCase(Locale.ROOT);

   for(char ch : lowerCase.toCharArray()){
    if(ch != ' '){


    if(charcount.containsKey(ch)){
     return false;
    }
    else
     charcount.put(ch, 1);
   }}
   return true;
  }

    public static void main(String[] args) {

       HashTable<String, Integer> clubs = new HashTable<String, Integer>();

        clubs.add("Real Madrid",100);
        clubs.add("Barcelona", 200);
        clubs.add("Man United", 300);
        clubs.add("Alhilal", 100);

        System.out.println("The size is => " + clubs.getSize());
        System.out.println(clubs.get("Real Madrid"));
        System.out.println("Delete Barcelona => " + clubs.remove("Barcelona"));
        System.out.println("The size is => " + clubs.getSize());
        System.out.println(clubs.contains("ss"));
        System.out.println(clubs.contains("Real Madrid"));

//        <<< Code Challenge 31 >>>

        String paragraph1 = "Once upon a time, there was a brave princess who...";
        String paragraph2 = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only";
        String paragraph3= "It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York";
        System.out.println(clubs.repeatedWord(paragraph3));


     // <<< Code challenge 34 >>>

        String interview1 = "The quick brown fox jumps over the lazy dog";
        String interview2 = "I love cats";
        String interview3 = "Donald the duck";

        System.out.println(isUnique(interview1));
        System.out.println(isUnique(interview2));
        System.out.println(isUnique(interview3));

     // <<< Code challenge 34 >>>

     HashTable<Integer,Integer> trees = new HashTable<Integer, Integer>();

     BinaryTree tree1 = new BinaryTree();
     BinaryTree tree2 = new BinaryTree();

     tree1.setRoot(new Node(150));
     tree1.getRoot().setLeft(new Node(100));
     tree1.getRoot().setRight(new Node(250));
     tree1.getRoot().getRight().setLeft(new Node(200));
     tree1.getRoot().getRight().setRight(new Node(350));
     tree1.getRoot().getRight().getRight().setLeft(new Node(300));
     tree1.getRoot().getRight().getRight().setRight(new Node(500));
     tree1.getRoot().getLeft().setLeft(new Node(75));
     tree1.getRoot().getLeft().setRight(new Node(160));
     tree1.getRoot().getLeft().getRight().setLeft(new Node(125));
     tree1.getRoot().getLeft().getRight().setRight(new Node(175));

     tree2.setRoot(new Node(42));
     tree2.getRoot().setLeft(new Node(100));
     tree2.getRoot().setRight(new Node(600));
     tree2.getRoot().getRight().setLeft(new Node(200));
     tree2.getRoot().getRight().setRight(new Node(350));
     tree2.getRoot().getRight().getRight().setLeft(new Node(4));
     tree2.getRoot().getRight().getRight().setRight(new Node(500));
     tree2.getRoot().getLeft().setLeft(new Node(15));
     tree2.getRoot().getLeft().setRight(new Node(160));
     tree2.getRoot().getLeft().getRight().setLeft(new Node(125));
     tree2.getRoot().getLeft().getRight().setRight(new Node(175));

     System.out.println(trees.treeIntersection(tree1,tree2));


    }
}

