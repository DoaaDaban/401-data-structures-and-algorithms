/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package binary.tree;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {

    //        <<< Code Challenge 15 >>>

    @Test
    public void emptyTreeTest(){
        BinaryTree binaryTreeTest = new BinaryTree();

        assertEquals("BinaryTree{  root = null }",binaryTreeTest.toString());
    }

    @Test
    public void singleRootTreeTest(){
        BinaryTree binaryTreeTest = new BinaryTree();
        binaryTreeTest.setRoot(new Node(7));

        assertEquals("BinaryTree{  root = 7 left = null right = null }",binaryTreeTest.toString());
    }

    @Test
    public void addSingleLeftChildRootTreeTest(){
        BinaryTree binaryTreeTest = new BinaryTree();
        binaryTreeTest.setRoot(new Node(7));
        binaryTreeTest.getRoot().setLeft(new Node(9));

        assertEquals("BinaryTree{  root = 7 left = 9 right = null }",binaryTreeTest.toString());
    }

    @Test
    public void addSingleRightChildRootTreeTest(){
        BinaryTree binaryTreeTest = new BinaryTree();
        binaryTreeTest.setRoot(new Node(7));
        binaryTreeTest.getRoot().setRight(new Node(11));

        assertEquals("BinaryTree{  root = 7 left = null right = 11 }",binaryTreeTest.toString());

    }

    @Test
    public void addSingleChildRootTreeTest(){
        BinaryTree binaryTreeTest = new BinaryTree();
        binaryTreeTest.setRoot(new Node(7));
        binaryTreeTest.getRoot().setLeft(new Node(9));
        binaryTreeTest.getRoot().setRight(new Node(11));

        assertEquals("BinaryTree{  root = 7 left = 9 right = 11 }",binaryTreeTest.toString());

    }

    @Test
    public void preOrderTest(){
        BinaryTree binaryTreeTest = new BinaryTree();


        binaryTreeTest.setRoot(new Node(7));
        binaryTreeTest.getRoot().setLeft(new Node(9));
        binaryTreeTest.getRoot().setRight(new Node(11));
        binaryTreeTest.getRoot().getLeft().setLeft(new Node(13));
        binaryTreeTest.getRoot().getLeft().setRight(new Node((1)));
        binaryTreeTest.preOrder(binaryTreeTest.getRoot());

        assertEquals("[7, 9, 13, 1, 11]",binaryTreeTest.preOrderList.toString());

    }

    @Test
    public void inOrderTest(){
        BinaryTree binaryTreeTest = new BinaryTree();


        binaryTreeTest.setRoot(new Node(7));
        binaryTreeTest.getRoot().setLeft(new Node(9));
        binaryTreeTest.getRoot().setRight(new Node(11));
        binaryTreeTest.getRoot().getLeft().setLeft(new Node(13));
        binaryTreeTest.getRoot().getLeft().setRight(new Node((1)));
        binaryTreeTest.inOrder(binaryTreeTest.getRoot());

        assertEquals("[13, 9, 1, 7, 11]",binaryTreeTest.inOrderList.toString());

    }

    @Test
    public void postOrderTest(){
        BinaryTree binaryTreeTest = new BinaryTree();


        binaryTreeTest.setRoot(new Node(7));
        binaryTreeTest.getRoot().setLeft(new Node(9));
        binaryTreeTest.getRoot().setRight(new Node(11));
        binaryTreeTest.getRoot().getLeft().setLeft(new Node(13));
        binaryTreeTest.getRoot().getLeft().setRight(new Node((1)));
        binaryTreeTest.postOrder(binaryTreeTest.getRoot());

        assertEquals("[13, 1, 9, 11, 7]",binaryTreeTest.postOrderList.toString());

    }

    //        <<< Code Challenge 16 >>>

    @Test(expected = IllegalArgumentException.class)
    public void maxValueTestempty() {
        BinaryTree binaryTreeTest = new BinaryTree();

        assertEquals(IllegalArgumentException.class,binaryTreeTest.findMaxvalue());

    }

    @Test
    public void maxValueTest(){
        BinaryTree binaryTreeTest = new BinaryTree();

        binaryTreeTest.setRoot(new Node(7));
        assertEquals(7,binaryTreeTest.findMaxvalue());

        binaryTreeTest.getRoot().setLeft(new Node(9));
        binaryTreeTest.getRoot().setRight(new Node(11));
        assertEquals(11,binaryTreeTest.findMaxvalue());

        binaryTreeTest.getRoot().getLeft().setLeft(new Node(13));
        binaryTreeTest.getRoot().getLeft().setRight(new Node((1)));
        assertEquals(13,binaryTreeTest.findMaxvalue());
    }


}
